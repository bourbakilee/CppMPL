//
// File: InitialValueGuess2.cpp
//
// MATLAB Coder version            : 3.1
// C/C++ source code generated on  : 16-Apr-2016 17:20:28
//

// Include Files
#include "rt_nonfinite.h"
#include "InitialValueGuess2.h"

// Function Definitions

//
// MYNEURALNETWORKFUNCTION neural network simulation function.
//
//  Generated by Neural Network Toolbox function genFunction, 16-Apr-2016 17:17:42.
//
//  [y1] = myNeuralNetworkFunction(x1) takes these arguments:
//    x = 5xQ matrix, input #1
//  and returns:
//    y = 3xQ matrix, output #1
//  where Q is the number of samples.
// Arguments    : const double x1[5]
//                double b_y1[3]
// Return Type  : void
//
void InitialValueGuess2(const double x1[5], double b_y1[3])
{
  double xp1[5];
  int k;
  double av[5];
  static const double b[5] = { -0.2, 1.0, -50.0, -1.5707963267949, -0.2 };

  static const double b_b[5] = { 5.0, 0.0408163265306122, 0.02,
    0.636619772367581, 5.0 };

  double c_b[30];
  double d_b[30];
  double x[30];
  static const double a[30] = { -4.4869709835196465, 0.48242839768197349,
    4.0074017542531193, -6.60288637432561, -5.4410163464291514,
    6.8810322882958763, 0.898038093626834, -0.10295604062172711,
    -0.10913163350820031, -4.0879688013530933, 2.5601628136370413,
    -0.6849983078537244, -0.54374589412840135, 0.57816615855664566,
    -6.8357872220644733, 1.7895396453131547, -0.89636363835021871,
    3.1004193733871928, -0.20024225908353752, 0.78976189789450235,
    1.7250487548068434, -6.9687664775197158, -0.40073419689803569,
    0.80202767478075676, 0.72256959377527952, 7.4603151412996649,
    13.437730627438217, -4.2943054074068945, 3.1004104449336491,
    1.4166701545473033 };

  double bv[3];
  double d0;
  int i0;
  static const double b_a[3] = { -0.28613300780756229, -0.23739291437216892,
    4.1368552926972813 };

  static const double c_a[150] = { 1.8058894057744723, -0.37451874178075878,
    -2.8485435168898494, 3.9393387709028542, 3.1068607956583834,
    -4.0924740227913565, -1.4809418276418673, -0.0068721003697495373,
    0.026615366881510272, 2.9529479556986278, 0.56677288878503385,
    -0.31586273006456256, -0.546226791627525, 0.44002887546482156,
    -5.2416293474209512, 0.030891091281475117, 1.4668969724089449,
    4.19262415573845, -0.14560877765996624, 0.27259727285430524,
    0.031730274345403063, -5.2035800437732105, -0.014527183866680454,
    0.60810766306683894, 0.20043706497724642, 5.4085751458235292,
    5.3426233626462274, 0.19076430144870424, 0.81653917851842051,
    -0.19542938370876, 1.4358406367421108, 0.13442021649354571,
    0.51229080394657456, -0.12705337146356174, -0.72110485693465642,
    -0.059559337265576974, 0.0041680710379920034, 0.032093033212149104,
    -0.020149231887825633, -0.53601126658773779, 0.1657516191267564,
    -0.12008788814920442, -0.22242495871716311, 0.1921927236030784,
    -0.49197660861388248, 0.041841064890350617, -0.0029289478747899392,
    0.32111060944356251, 0.40103553759650823, -0.11133124301435493,
    0.051840038871292946, -0.48176412226568283, 0.051929449079679141,
    -0.15975217037012676, -0.099842281790656073, 0.50308712961352975,
    1.0359325905567975, -0.18396821793687299, -0.65710491610449207,
    0.22547478313181682, 0.33446708368037065, 0.516600384322219,
    2.6318464958368595, -3.5285364431022503, -3.4068766516605722,
    3.7407132686629652, -0.068108592745935323, -0.70622942312949477,
    0.8343024635242059, -2.7389712419957308, -0.895051219201753,
    0.458667464947019, 0.91420457152560008, -0.70515798379085848,
    3.8242430771206273, -1.683527481821337, 0.086074592512835835,
    -2.6231928874338304, 0.18832160456779168, 0.68614859678144824,
    -1.5589753018851362, 3.8250292664842029, -0.644532089871737,
    -0.7042055066624896, 0.60852699518753139, -4.078603734702388,
    -7.5908805868288409, -3.0966841277937038, -0.0022147828437060193,
    1.52808638675422, -1.2705434091307675, -0.30306287222731931,
    -1.1145981512615246, 1.4253486165743641, 1.5396298458303987,
    -1.509140340348925, -0.465759310344028, -0.057292000622577784,
    -0.00015896002882479659, 1.1790281939578264, 0.54819072485373987,
    -0.24129529497790975, -0.47679605493442917, 0.37200216805316505,
    -1.2780920556819435, 0.90516208881269222, 0.45248078765049704,
    3.1054231438922564, -0.017392935915842834, 0.035816051001077341,
    0.85717837244373773, -1.3035294584151731, -0.14855994929354105,
    0.42063449157731997, 0.11469177333309652, 1.4206233633567951,
    3.0314868270445765, 1.8307992887024542, -0.581176961796987,
    -0.287413318423983, 1.2531508806341987, 0.620473930178115,
    0.17160096255620519, -0.8725835077259334, -1.660882119487477,
    0.92507144481374126, -3.4194650579241914, 0.12753980119636965,
    -0.085108956547210055, -0.22994400156094993, -1.0935857696499673,
    0.41825806524720949, 0.74359627996707856, -0.60524055554170531,
    0.34889936909874891, -1.3417002345735254, 3.4357465402297054,
    3.2200748398340187, 0.16211471155925783, -0.033616194312307064,
    -1.2389588943968384, 0.36597666289159581, 0.18882339856857139,
    -0.70219265726016045, -0.095531054961425443, -0.39831796480922427,
    -3.8680020680760037, -2.7164182667561927, 0.56659376452425525,
    0.92211207375354043 };

  double b_av[3];
  double a2[3];
  static const double e_b[3] = { 3.33335707628279, 3.33337432055356,
    0.00200524927812886 };

  static const double d_a[90] = { -0.41496271305975008, -0.49800561450200026,
    0.20982415889341965, 0.58290617657418731, -0.21638394386487422,
    -1.9004635856654917, -0.13269633674474954, 0.37466784205479137,
    -5.0519779104242923, -0.43340219365233046, 0.28465078235458474,
    -2.5379812628038461, 0.006366712535879517, -0.074597153217066212,
    0.450418716029076, -0.48022361823295057, 0.38877113116280654,
    -1.9518029160509043, 0.34093774625313283, -0.21356416614480911,
    -2.8015719062309685, -0.51435848426716557, 0.16522337868665191,
    10.071629236594498, -0.02594205922931107, -0.32991692537970935,
    5.0094698526551635, 0.01067281596690837, 0.2422105404462076,
    -4.6921743153729176, -0.34296956985401345, -0.35232989941711718,
    4.6033884476408353, -0.352836281405075, -0.034647811142317173,
    21.928431563176936, -0.18286925057060166, 0.094393161131340664,
    6.6294321253223449, -0.40625765014367365, 0.23818469010464668,
    19.1179943724994, 0.22138740193094134, -0.050158683672809776,
    5.3505512347004549, 0.26977072721463907, 0.24055831900197269,
    4.2199069755620267, 0.30824460098340317, -0.15496154569162005,
    -2.7890459329851121, -0.0066281877779141556, 0.044371765413725478,
    0.015178030560200655, -0.093730170791542028, 0.14602482696833469,
    1.137249083503058, -0.24610952847531795, -0.20815544925718552,
    5.5782579018078255, -0.029617924708981495, -0.11983961987489308,
    -5.0598162977833629, 0.11300535992750002, 0.37411000925110094,
    -11.149501697034271, -0.2722243126958474, -0.71834832851359554,
    -6.6106918409696993, -0.080045526460596025, 0.027076029049959247,
    1.7236010710665284, -0.08965874482728925, 0.024184152146585054,
    -8.0969156303806784, 0.52371776839563555, 0.023047447199130267,
    -5.8551444900802858, 0.14391850204880349, -0.023456208058370103,
    0.21314850671108929, 0.1679819626972697, -0.17232751908079386,
    0.1612064697167431, -0.040362834014972621, -0.15811252609990978,
    -1.9858240133358587, -0.22038167184860277, -0.19628755526196018,
    0.24411778952423316 };

  static const double f_b[3] = { -0.299997863149769, -0.299996311195538, 1.0 };

  //  ===== NEURAL NETWORK CONSTANTS =====
  //  Input 1
  //  Layer 1
  //  Layer 2
  //  Output 1
  //  ===== SIMULATION ========
  //  Dimensions
  //  samples
  //  Input 1
  //  ===== MODULE FUNCTIONS ========
  //  Map Minimum and Maximum Input Processing Function
  for (k = 0; k < 5; k++) {
    xp1[k] = x1[k] - b[k];
  }

  for (k = 0; k < 5; k++) {
    av[k] = xp1[k] * b_b[k];
  }

  for (k = 0; k < 5; k++) {
    xp1[k] = av[k];
  }

  for (k = 0; k < 5; k++) {
    av[k] = xp1[k] + -1.0;
  }

  for (k = 0; k < 5; k++) {
    xp1[k] = av[k];
  }

  //  Layer 1
  //  Sigmoid Symmetric Transfer Function
  for (k = 0; k < 30; k++) {
    d_b[k] = a[k];
    d0 = 0.0;
    for (i0 = 0; i0 < 5; i0++) {
      d0 += c_a[k + 30 * i0] * xp1[i0];
    }

    c_b[k] = d_b[k] + d0;
    x[k] = -2.0 * c_b[k];
    x[k] = exp(x[k]);
  }

  //  Layer 2
  for (k = 0; k < 3; k++) {
    bv[k] = b_a[k];
  }

  for (i0 = 0; i0 < 30; i0++) {
    c_b[i0] = 2.0 / (1.0 + x[i0]) - 1.0;
  }

  //  Output 1
  //  Map Minimum and Maximum Output Reverse-Processing Function
  for (k = 0; k < 3; k++) {
    d0 = 0.0;
    for (i0 = 0; i0 < 30; i0++) {
      d0 += d_a[k + 3 * i0] * c_b[i0];
    }

    a2[k] = bv[k] + d0;
    b_av[k] = a2[k];
    b_av[k] -= -1.0;
    b_y1[k] = b_av[k];
  }

  for (k = 0; k < 3; k++) {
    b_av[k] = b_y1[k] / e_b[k];
  }

  for (k = 0; k < 3; k++) {
    b_y1[k] = b_av[k];
  }

  for (k = 0; k < 3; k++) {
    b_av[k] = b_y1[k] + f_b[k];
  }

  for (k = 0; k < 3; k++) {
    b_y1[k] = b_av[k];
  }
}

//
// File trailer for InitialValueGuess2.cpp
//
// [EOF]
//
