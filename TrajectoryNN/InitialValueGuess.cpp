//
// File: InitialValueGuess.cpp
//
// MATLAB Coder version            : 3.1
// C/C++ source code generated on  : 08-Apr-2016 16:14:39
//

// Include Files
#include "rt_nonfinite.h"
#include "InitialValueGuess.h"

// Function Definitions

//
// MYNEURALNETWORKFUNCTION neural network simulation function.
//
//  Generated by Neural Network Toolbox function genFunction, 08-Apr-2016 15:51:04.
//
//  [y1] = myNeuralNetworkFunction(x1) takes these arguments:
//    x = 5xQ matrix, input #1
//  and returns:
//    y = 3xQ matrix, output #1
//  where Q is the number of samples.
// Arguments    : const double x1[5]
//                double b_y1[3]
// Return Type  : void
//
void InitialValueGuess(const double x1[5], double b_y1[3])
{
  double xp1[5];
  int k;
  double av[5];
  static const double b[5] = { -0.15, 1.0, -25.0, -0.785398163397448, -0.1 };

  static const double b_b[5] = { 6.66666666666667, 0.0408163265306122, 0.04,
    1.27323954473516, 10.0 };

  double c_b[30];
  double d_b[30];
  double x[30];
  static const double a[30] = { -5.7153875378544052, -0.27822872590821146,
    2.5690242527212668, -3.0501715631416, -1.8541324794735738,
    8.2201735582007167, 0.61205675419668537, -7.6900087874882868,
    -0.7898787168149829, -1.7304645646903412, 0.046626895029867638,
    -0.21101067098911316, -0.38665582876364407, 4.38179824163017,
    0.070377283914438, -0.9803669971114537, -0.58324994524712725,
    4.2199443366994869, 0.21510008582496029, 8.0611215651043864,
    1.3555377392536003, 4.2981097454068147, 1.2569308514964932,
    1.9683312174111331, 0.99268549384770333, 7.3192232274324631,
    3.1791618734199063, -2.6767361364327975, 2.30848899907766,
    -2.5690610564619139 };

  double bv[3];
  double d0;
  int i0;
  static const double b_a[3] = { -0.56532443126929532, -0.44567789116526035,
    2.5832544447856627 };

  static const double c_a[150] = { -0.96902097378459962, -0.14021463020939218,
    -0.13735186241905362, 0.47945110754346032, 0.23408765137092058,
    -3.0762798701508376, -0.22362074789841607, 2.7894214061107432,
    0.86930742710634246, 1.0057055221082998, -1.4635527459245614,
    1.897097918399947, 0.28403079438116513, 1.1653762398330509,
    0.33884154235806285, 0.49326076502762245, 0.31573413956146607,
    1.2220955300615346, 1.7630696436521083, 2.8016602190345434,
    0.946137382588103, -0.99020799109582347, 1.9741853799774178,
    0.83034120862342531, -0.23027392126398619, 2.4543600894601481,
    0.29671038267271438, -0.49030642359093835, 0.0011563380253769942,
    0.066565659089217938, -0.96300568207853432, 0.34907530485258742,
    -0.403205937745477, -0.84454576617590571, -0.51985389329546317,
    4.1483046407358835, 0.072541421189748045, -3.8025033345512327,
    1.6516256810696563, -2.2225873866461536, -0.042833403608991523,
    0.30800995157827277, -0.029818269712619808, 1.7233836760724806,
    -2.6739806526350991, -0.62459719336032771, 0.21456579732363432,
    1.7865386201466427, 1.0672882858727224, 4.4085541058683422,
    -0.9968754534280817, 1.3865593940147158, 1.2026911131941087,
    -1.9512986875506657, 0.057538792396791931, 3.844956108270269,
    1.5252340555154842, 0.37785891634294738, 0.66620659609142518,
    -0.89598171163493756, 1.999140012207931, 0.22181651969392779,
    -0.25243961384109292, 0.42309030303813633, 1.9158743860995391,
    1.1544663813028426, -0.53432832788729945, -1.0391484116059098,
    -0.98624562175934516, -0.46113100704818288, 0.15137279869991402,
    -0.090609029847733, 1.6375580882121921, -0.43997245249946704,
    1.6054980514312525, -0.2822771093202795, -0.27565186770550526,
    -0.4112949912947016, -0.66252772919006409, -0.99930971654169487,
    -1.8114193783208594, 0.22000455086570356, 0.10656638300614933,
    1.7690493232353597, 0.21559743733174661, -0.88238771459428889,
    -0.56430580756581472, -0.095770854443091011, -0.15527016660154944,
    -0.75935058007930711, -0.96848768291787624, -0.45674198118949139,
    0.45073675232037869, 0.23263219799153426, 0.079574112219161747,
    -1.5181465849988318, 0.18781481310200182, 1.3852507429844239,
    -2.0493962529849381, 0.24331512093190349, 0.32116018361793908,
    -0.50912427664232085, 0.011620013425447391, 0.81492431588984415,
    -0.15554011763056055, 0.57371504225524073, -0.30480019546850351,
    0.93953388465972787, 1.0185536218228344, 1.4331495190389039,
    0.30004506301810119, -0.6651988781302216, -1.4674479862250513,
    0.65081553567297823, -0.16441900276090446, 1.2817376519235419,
    0.28133999842156193, 0.37411917867170225, -2.4054528551875247,
    0.1913205435861709, 0.44753513523834265, 0.44205163130162883,
    -0.41300468254312694, -0.4281228741243453, -0.10923353654332002,
    0.677235289650078, -0.24977564600945842, -0.66243269028287088,
    -0.89655668993027893, 1.4116073943121843, -1.2531478595878003,
    1.7485866795121492, -0.091019839864993082, -0.651342977650777,
    -1.1930032214977402, -0.56966795606822684, 0.36396082037656896,
    -0.856781807681329, -0.37504515662437871, -0.74946511067305133,
    0.99792395936503042, 0.736555705203039, -0.48531889855310689,
    0.25443364146459757, 0.1227443999034121, -0.69832029730180845,
    -0.27636491863761076, -0.38854828252341533, -1.6709524428676137,
    -0.14907166781665585 };

  double b_av[3];
  double a2[3];
  static const double e_b[3] = { 3.33335707628279, 3.33348070590154,
    0.00361940528481068 };

  static const double d_a[90] = { -0.20998733927283122, -0.25402279449978155,
    1.4473399842001475, 0.22753042023760869, -0.14918607255504679,
    0.21173629209939437, -0.28974345841359239, 0.3928001475324317,
    -1.4573090396073756, -0.096265733997536823, 0.15549594460497632,
    0.97434956663383643, 0.22503194822088454, -0.36372840112140686,
    0.078059655601539754, -0.510375046234864, 0.23631176683604802,
    1.9584036402522753, 0.10227650019356506, -0.063753740017280791,
    0.21362267326047374, -0.54475297623865249, 0.52800829831672069,
    2.6544211212150843, -0.076862995435674944, -0.030809250484581153,
    -0.0012787150841763802, -0.053765347659403037, -0.0050906886420693676,
    -0.0040652763814195336, -0.087193542341260213, -0.15885239620948943,
    0.02171899589604567, -0.14716003815030174, -0.16390452154512228,
    0.015318350350308844, 0.12930477516618247, -0.084457573132980551,
    0.0561128094615041, -0.52929477932946745, 0.26238406573752671,
    3.6712837829401459, 0.090610132425675741, -0.019863214840120279,
    0.00055958599184929565, -0.11789160228844602, 0.23729593517631414,
    -0.17381879739604533, -0.02366206482097799, 0.11597909359474654,
    -0.10989064703059229, -0.069399175828989773, 0.16616852721290834,
    -1.0614059670515605, 0.0058186014727055722, 0.056821404099201611,
    0.0054997725361238484, 0.010253204237084137, 0.09939431085097411,
    2.0334439759432108, -0.071130879659027674, -0.0695052747860707,
    0.0047889787526522688, -0.28551389928904519, 0.30582346098813268,
    2.1243481193890226, -0.026916269221903662, -0.090528997876179226,
    0.0010342164889227, -0.12101847443510752, -0.043401564069393883,
    0.0012794099786171632, -0.035973380468666154, 0.044556542289353948,
    -1.0625234060763744, 0.61470059858959658, -0.11832979040669189,
    -3.2341567462486185, 0.26505521987168523, -0.20824934164373585,
    -0.400927928794626, -0.39812843661089253, 0.16510057050426566,
    0.88722663641829458, -0.084819651583089836, -0.034881094432357193,
    -0.0034223732075186592, -0.38545136619086506, 0.10821398301884179,
    0.55359740596718288 };

  static const double f_b[3] = { -0.299997863149769, -0.29998673705524, 1.0 };

  //  ===== NEURAL NETWORK CONSTANTS =====
  //  Input 1
  //  Layer 1
  //  Layer 2
  //  Output 1
  //  ===== SIMULATION ========
  //  Dimensions
  //  samples
  //  Input 1
  //  ===== MODULE FUNCTIONS ========
  //  Map Minimum and Maximum Input Processing Function
  for (k = 0; k < 5; k++) {
    xp1[k] = x1[k] - b[k];
  }

  for (k = 0; k < 5; k++) {
    av[k] = xp1[k] * b_b[k];
  }

  for (k = 0; k < 5; k++) {
    xp1[k] = av[k];
  }

  for (k = 0; k < 5; k++) {
    av[k] = xp1[k] + -1.0;
  }

  for (k = 0; k < 5; k++) {
    xp1[k] = av[k];
  }

  //  Layer 1
  //  Sigmoid Symmetric Transfer Function
  for (k = 0; k < 30; k++) {
    d_b[k] = a[k];
    d0 = 0.0;
    for (i0 = 0; i0 < 5; i0++) {
      d0 += c_a[k + 30 * i0] * xp1[i0];
    }

    c_b[k] = d_b[k] + d0;
    x[k] = -2.0 * c_b[k];
    x[k] = std::exp(x[k]);
  }

  //  Layer 2
  for (k = 0; k < 3; k++) {
    bv[k] = b_a[k];
  }

  for (i0 = 0; i0 < 30; i0++) {
    c_b[i0] = 2.0 / (1.0 + x[i0]) - 1.0;
  }

  //  Output 1
  //  Map Minimum and Maximum Output Reverse-Processing Function
  for (k = 0; k < 3; k++) {
    d0 = 0.0;
    for (i0 = 0; i0 < 30; i0++) {
      d0 += d_a[k + 3 * i0] * c_b[i0];
    }

    a2[k] = bv[k] + d0;
    b_av[k] = a2[k];
    b_av[k] -= -1.0;
    b_y1[k] = b_av[k];
  }

  for (k = 0; k < 3; k++) {
    b_av[k] = b_y1[k] / e_b[k];
  }

  for (k = 0; k < 3; k++) {
    b_y1[k] = b_av[k];
  }

  for (k = 0; k < 3; k++) {
    b_av[k] = b_y1[k] + f_b[k];
  }

  for (k = 0; k < 3; k++) {
    b_y1[k] = b_av[k];
  }
}

//
// File trailer for InitialValueGuess.cpp
//
// [EOF]
//
